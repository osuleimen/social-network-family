#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è SMS-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:5000/api"
TEST_PHONE = "+77019990438"

def test_request_code():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ SMS –∫–æ–¥–∞"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ SMS –∫–æ–¥–∞...")
    
    url = f"{BASE_URL}/sms-auth/request-code"
    data = {"phone_number": TEST_PHONE}
    
    try:
        response = requests.post(url, json=data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            print(f"–ù–æ–º–µ—Ä: {result.get('phone_number')}")
            print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.get('is_new_user')}")
            
            if result.get('test_mode'):
                print(f"üîê –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ö–æ–¥: {result.get('code')}")
            
            return result.get('code')
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_verify_code(phone, code):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ SMS –∫–æ–¥–∞"""
    print(f"\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ {code}...")
    
    url = f"{BASE_URL}/sms-auth/verify-code"
    data = {
        "phone_number": phone,
        "verification_code": code
    }
    
    try:
        response = requests.post(url, json=data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.get('is_new_user')}")
            print(f"Access Token: {result.get('access_token')[:20]}...")
            print(f"Refresh Token: {result.get('refresh_token')[:20]}...")
            return result.get('access_token')
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def test_resend_code():
    """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∫–æ–¥–∞"""
    print(f"\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS...")
    
    url = f"{BASE_URL}/sms-auth/resend-code"
    data = {"phone_number": TEST_PHONE}
    
    try:
        response = requests.post(url, json=data)
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            
            if result.get('test_mode'):
                print(f"üîê –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –ù–æ–≤—ã–π –∫–æ–¥: {result.get('code')}")
            
            return result.get('code')
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMS-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    # 1. –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞
    code = test_request_code()
    if not code:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    token = test_verify_code(TEST_PHONE, code)
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.")
        return
    
    # 3. –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É rate limiting)
    print("\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    import time
    time.sleep(2)
    
    new_code = test_resend_code()
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if token:
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üîë –¢–æ–∫–µ–Ω: {token[:30]}...")
    else:
        print("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main()

